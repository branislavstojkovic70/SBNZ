package simple;

import com.ftn.sbnz.model.models.users.Patient;
import com.ftn.sbnz.model.models.users.Doctor;
import com.ftn.sbnz.model.models.users.OperatedPatient;
import com.ftn.sbnz.model.models.examinations.Examination;
import com.ftn.sbnz.model.models.examinations.ExaminationState;
import com.ftn.sbnz.model.models.examinations.Symptom;
import com.ftn.sbnz.model.models.examinations.SymptomFrequency;
import com.ftn.sbnz.model.models.examinations.ExaminationType;
import com.ftn.sbnz.model.models.examinations.ExaminationProcess;
import com.ftn.sbnz.model.models.examinations.TumorType;
import com.ftn.sbnz.model.models.examinations.TestResult;
import com.ftn.sbnz.model.models.examinations.Diagnosis;
import com.ftn.sbnz.model.models.examinations.TNMKlassification;
import com.ftn.sbnz.model.models.examinations.UpdatedExamination;
import com.ftn.sbnz.model.models.therapy.Therapy;
import com.ftn.sbnz.model.models.therapy.Operation;
import com.ftn.sbnz.model.models.therapy.PaliativeCare;
import com.ftn.sbnz.model.models.therapy.TherapyState;
import com.ftn.sbnz.model.models.therapy.TherapyType;
import com.ftn.sbnz.service.repository.examination.ExaminationRepository;
import com.ftn.sbnz.service.repository.users.PatientRepository;

import java.time.LocalDateTime;
import java.util.Set;
import java.util.HashSet;

global Set<String> criticalSymptoms;
global ExaminationRepository examinationRepository;
global PatientRepository patientRepository;
global javax.persistence.EntityManager entityManager;

rule "Schedule CT and RTG based on specific symptoms"
    no-loop true
when
    $updatedExamination : UpdatedExamination($patient: patient, $examination: examination)
    Number(intValue >= 3) from accumulate(
        $symptom: Symptom(name memberOf criticalSymptoms) from $examination.getSymptoms(),
        count(1)
    )
then
    ExaminationProcess process = new ExaminationProcess($patient, $patient.getExaminations(), false, false,
            false, false, false, false, false, false, false, false, false, false, false, false, null, null);
    insert(process);
    System.out.println("Pravilo 'Schedule CT and RTG based on specific symptoms' se okinulo.");

end

rule "Change flags for CT positive changes"
    no-loop true
when
    $process: ExaminationProcess(ctDone == false, $patient: patient, $examinations: examinations)
    $examination : Examination(
        examinationState == ExaminationState.DONE,
        note matches ".*CT.*"
    ) from $examinations
    $examinationType : ExaminationType() from $examination.getExaminationTypes()
    $testResult : TestResult(
        value > 0.0,
        description == "positive for changes"
    ) from $examinationType.getTestResults()
then
    modify($process) {
        setCtDone(true),
        setCtPositive(true)
    };
    System.out.println("Pravilo 'Change flags for CT positive changes' se okinulo.");
end

rule "Change flags for RTG positive changes"
    no-loop true
when
    $process: ExaminationProcess(rtgDone == false, $patient: patient, $examinations: examinations)
    $examination : Examination(
        examinationState == ExaminationState.DONE,
        note matches ".*RTG.*"
    ) from $examinations
    $examinationType : ExaminationType() from $examination.getExaminationTypes()
    $testResult : TestResult(
        value > 0.0,
        description == "positive for changes"
    ) from $examinationType.getTestResults()
then
    modify($process) {
        setRtgDone(true),
        setRtgPositive(true)
    };
    System.out.println("Pravilo 'Change flags for RTG positive changes' je okinulo.");
end

rule "Change flags for biopsy positive changes"
    no-loop true
when
    $process: ExaminationProcess(biopsyDone == false, $patient: patient, $examinations: examinations)
    $examination : Examination(
        examinationState == ExaminationState.DONE,
        note matches ".*biopsy.*"
    ) from $examinations
    $examinationType : ExaminationType() from $examination.getExaminationTypes()
    $testResult : TestResult(
        value > 0.0,
        description matches ".*malignant.*"
    ) from $examinationType.getTestResults()
then
    modify($process) {
        setBiopsyDone(true),
        setBiopsyPositive(true)
    };
    System.out.println("Pravilo 'Change flags for biopsy positive changes' je okinulo.");
end

rule "Change flags for spirometry positive changes"
    no-loop true
when
    $process: ExaminationProcess(spirometryDone == false, $patient: patient, $examinations: examinations)
    $examination : Examination(
        examinationState == ExaminationState.DONE,
        note matches ".*spirometry.*"
    ) from $examinations
    $examinationType : ExaminationType() from $examination.getExaminationTypes()
    $testResult : TestResult(
        value > 0.0,
        description == "positive for changes"
    ) from $examinationType.getTestResults()
then
    modify($process) {
        setSpirometryDone(true),
        setSpirometryBadResult(true)
    };
    System.out.println("Pravilo 'Change flags for spirometry positive changes' je okinulo.");
end

rule "Change flags for spiroergometry positive changes"
    no-loop true
when
    $process: ExaminationProcess(spiroergometryDone == false, $patient: patient, $examinations: examinations)
    $examination : Examination(
        examinationState == ExaminationState.DONE,
        note matches ".*spiroergometry.*"
    ) from $examinations
    $examinationType : ExaminationType() from $examination.getExaminationTypes()
    $testResult : TestResult(
        value > 0.0,
        description == "positive for changes"
    ) from $examinationType.getTestResults()
then
    modify($process) {
        setSpiroergometryDone(true),
        setSpiroergometryBadResult(true)
    };
    System.out.println("Pravilo 'Change flags for spiroergometry positive changes' je okinulo.");
end

rule "Change flags for DLCO positive changes"
    no-loop true
when
    $process: ExaminationProcess(dlcoDone == false, $patient: patient, $examinations: examinations)
    $examination : Examination(
        examinationState == ExaminationState.DONE,
        note matches ".*DLCO.*"
    ) from $examinations
    $examinationType : ExaminationType() from $examination.getExaminationTypes()
    $testResult : TestResult(
        value > 0.0,
        description == "positive for changes"
    ) from $examinationType.getTestResults()
then
    modify($process) {
        setDlcoDone(true),
        setDlcoBadResult(true)
    };
    System.out.println("Pravilo 'Change flags for DLCO positive changes' je okinulo.");
end

rule "Change flags for genetic test positive changes"
    no-loop true
when
    $process: ExaminationProcess(geneticTestDone == false, $patient: patient, $examinations: examinations)
    $examination : Examination(
        examinationState == ExaminationState.DONE,
        note matches ".*genetic.*"
    ) from $examinations
    $examinationType : ExaminationType() from $examination.getExaminationTypes()
    $testResult : TestResult(
        value > 0.0,
        description == "positive for changes"
    ) from $examinationType.getTestResults()
then
    modify($process) {
        setGeneticTestDone(true),
        setGeneticTestBadResult(true)
    };
    System.out.println("Pravilo 'Change flags for genetic test positive changes' je okinulo.");
    
end

rule "Determine diagnosis based on examination results"
    no-loop true
when
    $process: ExaminationProcess(
        ctPositive == true || rtgPositive == true || biopsyPositive == true || spirometryBadResult == true ||
        spiroergometryBadResult == true || dlcoBadResult == true || geneticTestBadResult == true,
        diagnosis == null
    )
    $patient: Patient()
then
    Diagnosis diagnosis = new Diagnosis(null, true, TumorType.INTRATHORACAL_PULMONARY, new TNMKlassification(null, 2.0, 1.0, 0.0, LocalDateTime.now()));
    diagnosis.setTumorDetected(true);
    if ($process.isGeneticTestBadResult()) {
        diagnosis.setTumorType(TumorType.INTRATHORACAL_PULMONARY);  
    } else if ($process.isDlcoBadResult() || $process.isSpiroergometryBadResult() || $process.isSpirometryBadResult()) {
        diagnosis.setTumorType(TumorType.INTRATHORACAL_NONPULMONARY);  
    } else if ($process.isBiopsyPositive()) {
        diagnosis.setTumorType(TumorType.EXTRATORACAL_PULMONARY);  
    } else {
        diagnosis.setTumorType(TumorType.EXTRATORACAL_NONPULMONARY);  
    }
    modify($process) {
        setDiagnosis(diagnosis)
    };
    for (Examination exam : $process.getExaminations()) {
        if (exam.getDiagnosis() == null) {
            exam.setDiagnosis(diagnosis);
            System.out.println("Postavljena dijagnoza za pregled: " + exam.getNote());
        }
    }
    System.out.println("Pravilo 'Determine diagnosis based on examination results' je okinulo.");
end


function Therapy createTherapyBasedOnTNM(TNMKlassification tnm) {
    Therapy therapy = new Therapy(null, LocalDateTime.now(), LocalDateTime.now().plusMonths(6), "",
            TherapyType.PALLIATIVE_CARE, TherapyState.PLANNED);

    if (tnm.gettKlassification() <= 2 && tnm.getnKlassification() == 0 && tnm.getmKlassification() == 0) {
        therapy.setTherapyType(TherapyType.RADIOTHERAPY);
        therapy.setDescription("Planned surgery based on TNM classification");
    } else if (tnm.gettKlassification() <= 3 && tnm.getnKlassification() <= 1 && tnm.getmKlassification() == 0) {
        therapy.setTherapyType(TherapyType.OPERATION);
        therapy.setDescription("Planned radiotherapy based on TNM classification");
    } else if (tnm.gettKlassification() <= 4 && tnm.getnKlassification() <= 2 && tnm.getmKlassification() == 0) {
        therapy.setTherapyType(TherapyType.CHEMOTHERAPY);
        therapy.setDescription("Planned chemotherapy based on TNM classification");
    } else {
        therapy.setTherapyType(TherapyType.PALLIATIVE_CARE);
        therapy.setDescription("Planned palliative care based on TNM classification");
    }

    return therapy;
}

rule "Determine therapy based on TNM classification in ExaminationProcess"
    no-loop true
when
    $process: ExaminationProcess(diagnosis != null, therapy == null)
    $diagnosis: Diagnosis(tnmKlassification != null) from $process.getDiagnosis()
    $tnm: TNMKlassification(tKlassification > 0.0) from $diagnosis.getTnmKlassification()
then
    Therapy therapy = createTherapyBasedOnTNM($tnm);
    modify($process) {
        setTherapy(therapy)
    };
    System.out.println("Therapy determined for patient based on TNM classification: " + therapy.getTherapyType());
end

query "getExaminationProcess"
    $process: ExaminationProcess()
end